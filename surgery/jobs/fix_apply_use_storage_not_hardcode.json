{
  "id": "fix_apply_use_storage",
  "description": "Fix apply(): Use StorageManager data instead of hardcoded DATA array for calculations",
  "file": "dist/dashboard_enhanced.html",
  "mode": "text-exact",
  "target": "  apply() {\n    console.log('🔍 [UIController.apply] Iniciando actualización de UI');\n    \n    // Log de estado actual\n    console.log('📊 [STATE] Dashboard.DATA antes de actualización:', JSON.stringify(Dashboard.DATA));\n    console.log('🧹 [STATE] StorageManager.CLEARED_FLAG:', sessionStorage.getItem(Dashboard.StorageManager.CLEARED_FLAG));\n    console.log('🗃️ [STATE] BUs en storage:', JSON.stringify(Dashboard.StorageManager.getBUs()));\n    \n    // Actualizar DATA desde storage con progreso calculado\n    const enhancedData = Dashboard.ProgressCalculator.getEnhancedDATA();\n    console.log('📈 [PROGRESS] Datos mejorados calculados:', JSON.stringify(enhancedData));\n    \n    for (let i = 0; i < enhancedData.length; i++) {\n      if (Dashboard.DATA[i]) Dashboard.DATA[i].progress = enhancedData[i].progress;\n    }\n    \n    console.log('📊 [STATE] Dashboard.DATA después de actualización:', JSON.stringify(Dashboard.DATA));\n    \n    const items = this.filtered();\n    const avgGlobal = Dashboard.DATA.length > 0 \n      ? Dashboard.DATA.reduce((s, d) => s + (d.progress || 0), 0) / Dashboard.DATA.length \n      : 0;\n    \n    console.log('📊 [CALCULO] Progreso global calculado:', avgGlobal, 'Items filtrados:', items.length);\n    \n    let heroValue = avgGlobal;\n    let heroText = 'Avg';",
  "replacement": "  apply() {\n    console.log('🔍 [UIController.apply] Iniciando actualización de UI');\n    \n    // Get data from StorageManager (the single source of truth)\n    const busesFromStorage = Dashboard.StorageManager.getBUs();\n    console.log('📊 [STORAGE] BUs in storage:', JSON.stringify(busesFromStorage));\n    console.log('🧹 [CLEARED] Flag state:', sessionStorage.getItem(Dashboard.StorageManager.CLEARED_FLAG));\n    \n    // If storage is empty (user cleared data), use empty items\n    if (busesFromStorage.length === 0) {\n      console.log('✅ [APPLY] Storage is empty - showing empty dashboard');\n      const items = [];\n      this.drawHero(0);\n      document.querySelector('#heroPct').textContent = '0';\n      document.querySelector('#heroCaption').textContent = 'Empty';\n      this.renderTiles(items);\n      this.drawBars(items);\n      this.updateKPIs(items);\n      return;\n    }\n    \n    // If storage has data, update Dashboard.DATA to match storage\n    const enhancedData = Dashboard.ProgressCalculator.getEnhancedDATA();\n    console.log('📈 [PROGRESS] Enhanced data from calculator:', JSON.stringify(enhancedData));\n    \n    // Sync Dashboard.DATA with storage-based enhanced data\n    Dashboard.DATA = enhancedData;\n    console.log('📊 [STATE] Dashboard.DATA synced with storage:', JSON.stringify(Dashboard.DATA));\n    \n    const items = this.filtered();\n    const avgGlobal = Dashboard.DATA.length > 0 \n      ? Dashboard.DATA.reduce((s, d) => s + (d.progress || 0), 0) / Dashboard.DATA.length \n      : 0;\n    \n    console.log('📊 [CALCULO] Progreso global:', avgGlobal, 'Items filtrados:', items.length);\n    \n    let heroValue = avgGlobal;\n    let heroText = 'Avg';"
}
