{
  "job_id": "status_automation_001",
  "name": "Implement Status Automation Logic",
  "description": "Replace manual status selection with intelligent automation based on progress percentage. When progress changes: 0% auto-sets TBS, 1-99% asks to start (â†’WIP), 100% asks to complete (â†’CLO).",
  "target_file": "dist/dashboard_enhanced.html",
  "changes": [
    {
      "type": "replace",
      "id": "add_modal_html",
      "location": "before_closing_admin_modal",
      "search": "      </div>\n    </div>\n  </div>\n</div>",
      "replace_with": "      </div>\n      <!-- Status Automation Confirmation Modal -->\n      <div id=\"statusConfirmationModal\" class=\"nested-modal\">\n        <div class=\"nested-modal-content\" style=\"min-width:400px;max-width:600px\">\n          <h3 id=\"confirmTitle\" style=\"margin:0 0 16px 0;font-size:20px;color:var(--text)\">Confirm Status Change</h3>\n          <p id=\"confirmMessage\" style=\"margin:0 0 24px 0;color:var(--text-muted);line-height:1.6\"></p>\n          <div style=\"display:flex;gap:12px;margin-top:24px\">\n            <button id=\"confirmYes\" class=\"btn btn-primary\" style=\"flex:1\">Yes, Proceed</button>\n            <button id=\"confirmNo\" class=\"btn btn-secondary\" style=\"flex:1\">Cancel</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>"
    },
    {
      "type": "replace",
      "id": "update_progress_input",
      "location": "renderAppsEditor_progress_input",
      "search": "          <td><div class=\"progress-cell\"><input type=\"number\" class=\"cell-input\" min=\"0\" max=\"100\" value=\"${app.progress || 0}\" onchange=\"Dashboard.AdminController.updateApp(${app.id}, {progress: parseInt(this.value)})\"/><div class=\"mini-progress\" style=\"width:${app.progress}%;background:${app.progress === 100 ? 'var(--ok)' : app.progress >= 50 ? 'var(--warn)' : 'var(--low)'}\"></div></div></td>",
      "replace_with": "          <td><div class=\"progress-cell\"><input type=\"number\" class=\"cell-input\" min=\"0\" max=\"100\" value=\"${app.progress || 0}\" data-old-progress=\"${app.progress || 0}\" onchange=\"Dashboard.AdminController.progressChangeHandler(${app.id}, this.value, this.getAttribute('data-old-progress'))\"/><div class=\"mini-progress\" style=\"width:${app.progress}%;background:${app.progress === 100 ? 'var(--ok)' : app.progress >= 50 ? 'var(--warn)' : 'var(--low)'}\"></div></div></td>"
    },
    {
      "type": "replace",
      "id": "add_data_app_id_to_row",
      "location": "renderAppsEditor_app_row",
      "search": "        html += `\n        <tr>\n          <td><input type=\"text\" class=\"cell-input\" value=\"${app.name}\" onchange=\"Dashboard.AdminController.updateApp(${app.id}, {name: this.value})\"/></td>",
      "replace_with": "        html += `\n        <tr data-app-id=\"${app.id}\">\n          <td><input type=\"text\" class=\"cell-input\" value=\"${app.name}\" onchange=\"Dashboard.AdminController.updateApp(${app.id}, {name: this.value})\"/></td>"
    },
    {
      "type": "replace",
      "id": "add_automation_functions",
      "location": "AdminController_before_renderAppsEditor",
      "search": "  renderAppsEditor() {",
      "replace_with": "  progressChangeHandler(appId, newProgress, oldProgress = null) {\n    const app = Dashboard.StorageManager.getAllApps().find(a => a.id === appId);\n    if (!app) return;\n    \n    oldProgress = oldProgress !== null ? oldProgress : (app.progress || 0);\n    newProgress = parseInt(newProgress) || 0;\n    \n    if (newProgress < 0) newProgress = 0;\n    if (newProgress > 100) newProgress = 100;\n    \n    if (oldProgress === 0 && newProgress === 0) return;\n    \n    if (newProgress === 0) {\n      this.handleStatusTransition(appId, 'TBS', 0);\n      return;\n    }\n    \n    if (oldProgress === 0 && newProgress > 0 && newProgress < 100) {\n      this.showStatusConfirmation(appId, 'start', newProgress, app.name);\n      const input = document.querySelector(`input[type=\"number\"][min=\"0\"][max=\"100\"]`);\n      if (input) input.setAttribute('data-old-progress', oldProgress);\n      return;\n    }\n    \n    if (oldProgress > 0 && oldProgress < 100 && newProgress === 100) {\n      this.showStatusConfirmation(appId, 'complete', newProgress, app.name);\n      const input = document.querySelector(`input[type=\"number\"][min=\"0\"][max=\"100\"]`);\n      if (input) input.setAttribute('data-old-progress', oldProgress);\n      return;\n    }\n    \n    if (newProgress >= 1 && newProgress < 100) {\n      if (app.status !== 'WIP') {\n        Dashboard.StorageManager.updateApp(appId, { progress: newProgress, status: 'WIP' });\n      } else {\n        Dashboard.StorageManager.updateApp(appId, { progress: newProgress });\n      }\n      this.renderAppsEditor();\n      Dashboard.UIController.apply();\n      return;\n    }\n    \n    if (newProgress === 100) {\n      if (app.status !== 'CLO') {\n        Dashboard.StorageManager.updateApp(appId, { progress: 100, status: 'CLO' });\n      } else {\n        Dashboard.StorageManager.updateApp(appId, { progress: 100 });\n      }\n      this.renderAppsEditor();\n      Dashboard.UIController.apply();\n      return;\n    }\n  },\n\n  showStatusConfirmation(appId, type, newProgress, appName = '') {\n    const modal = document.getElementById('statusConfirmationModal');\n    const titleEl = document.getElementById('confirmTitle');\n    const messageEl = document.getElementById('confirmMessage');\n    const yesBtn = document.getElementById('confirmYes');\n    const noBtn = document.getElementById('confirmNo');\n    \n    if (!modal || !titleEl || !messageEl || !yesBtn || !noBtn) {\n      console.error('Status confirmation modal elements not found');\n      return;\n    }\n    \n    let title, message, newStatus;\n    \n    if (type === 'start') {\n      title = 'ðŸš€ Start Application?';\n      message = `Ready to start \"<strong>${appName}</strong>\"? This will change status from <strong>TBS</strong> to <strong>WIP</strong>.`;\n      newStatus = 'WIP';\n    } else if (type === 'complete') {\n      title = 'âœ… Mark as Complete?';\n      message = `Ready to mark \"<strong>${appName}</strong>\" as complete? This will change status from <strong>WIP</strong> to <strong>CLO</strong>.`;\n      newStatus = 'CLO';\n    } else {\n      return;\n    }\n    \n    titleEl.textContent = title;\n    messageEl.innerHTML = message;\n    \n    const newYesBtn = yesBtn.cloneNode(true);\n    const newNoBtn = noBtn.cloneNode(true);\n    yesBtn.parentNode.replaceChild(newYesBtn, yesBtn);\n    noBtn.parentNode.replaceChild(newNoBtn, noBtn);\n    \n    const updatedYesBtn = document.getElementById('confirmYes');\n    const updatedNoBtn = document.getElementById('confirmNo');\n    \n    updatedYesBtn.addEventListener('click', () => {\n      this.handleStatusTransition(appId, newStatus, newProgress);\n      modal.classList.remove('active');\n    });\n    \n    updatedNoBtn.addEventListener('click', () => {\n      modal.classList.remove('active');\n      const appRow = document.querySelector(`tr[data-app-id=\"${appId}\"]`);\n      if (appRow) {\n        const progressInput = appRow.querySelector('input[type=\"number\"]');\n        if (progressInput) {\n          const currentApp = Dashboard.StorageManager.getAllApps().find(a => a.id === appId);\n          progressInput.value = currentApp.progress || 0;\n        }\n      }\n    });\n    \n    modal.classList.add('active');\n  },\n\n  handleStatusTransition(appId, newStatus, newProgress) {\n    Dashboard.StorageManager.updateApp(appId, {\n      status: newStatus,\n      progress: newProgress\n    });\n    this.renderAppsEditor();\n    Dashboard.UIController.apply();\n  },\n\n  renderAppsEditor() {"
    }
  ],
  "validation": {
    "after_apply": [
      "Check that progressChangeHandler is accessible in AdminController",
      "Verify statusConfirmationModal element exists in DOM",
      "Test progress change from 0 to 50 shows modal",
      "Test progress change from 50 to 100 shows modal",
      "Test progress change to 0 auto-sets TBS",
      "Verify localStorage updates correctly after confirmation"
    ]
  }
}
